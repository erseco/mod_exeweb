{"version":3,"file":"resize.min.js","sources":["../src/resize.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript helper function for mod_exeweb module.\n *\n * @module      mod_exeweb/resize\n * @copyright   2023 3&Punt\n * @author      Juan Carrera <juan@treipunt.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable no-console */\n\nimport Log from 'core/log';\n\n/**\n * Resizes iFrame and container height to iframes body size.\n * This function is to be declared on window namespace so iframe onload event can find it.\n * Used as mutation observer callback.\n *\n */\nexport const exewebResize = function() {\n    let iFrame = document.querySelector('#exewebobject');\n    if (iFrame.contentDocument.body) {\n        iFrame.style.width = '100%';\n        let iFrameHeight = iFrame.contentDocument.body.scrollHeight;\n        iFrame.style.height = (iFrameHeight + 50) + 'px';\n        Log.debug('iFrame height: ' + (iFrameHeight + 50) + 'px');\n    }\n};\n\n/**\n * IFrame's onload handler. Used to keep iFrame's height dynamic, varying on iFrame's contents.\n *\n * @param {event} event\n */\nexport const exewebIframeOnload = function(event) {\n    exewebResize();\n    // Set a mutation observer, so we can adapt to changes from iFrame's javascript (such\n    // as tab clicks o hide/show sections).\n    let iFrame = event.target;\n    const config = {attributes: true, childList: true, subtree: true};\n    const observer = new MutationObserver(window.exewebResize);\n    observer.observe(iFrame.contentDocument.body, config);\n};\n\nexport const init = () => {\n    // Declare on window namespace so iframe onload event can find it.\n    window.exewebResize = exewebResize;\n    window.exewebIframeOnload = exewebIframeOnload;\n\n    let page = document.getElementById('exewebpage');\n    let iframe = document.getElementById('exewebobject');\n    Log.debug('Setting iFframe load event listener');\n    iframe.addEventListener('load', exewebIframeOnload);\n\n    if (iframe.contentDocument.readyState === 'complete') {\n        exewebResize();\n    }\n\n    // Watch for page changes.\n    const pageObserver = new ResizeObserver(exewebResize);\n    pageObserver.observe(page);\n};\n"],"names":["exewebResize","iFrame","document","querySelector","contentDocument","body","style","width","iFrameHeight","scrollHeight","height","debug","exewebIframeOnload","event","target","MutationObserver","window","observe","attributes","childList","subtree","page","getElementById","iframe","addEventListener","readyState","ResizeObserver"],"mappings":";;;;;;;;4LAkCaA,aAAe,eACpBC,OAASC,SAASC,cAAc,oBAChCF,OAAOG,gBAAgBC,KAAM,CAC7BJ,OAAOK,MAAMC,MAAQ,WACjBC,aAAeP,OAAOG,gBAAgBC,KAAKI,aAC/CR,OAAOK,MAAMI,OAAUF,aAAe,GAAM,kBACxCG,MAAM,mBAAqBH,aAAe,IAAM,iDAS/CI,mBAAqB,SAASC,OACvCb,mBAGIC,OAASY,MAAMC,OAEF,IAAIC,iBAAiBC,OAAOhB,cACpCiB,QAAQhB,OAAOG,gBAAgBC,KAFzB,CAACa,YAAY,EAAMC,WAAW,EAAMC,SAAS,kEAK5C,KAEhBJ,OAAOhB,aAAeA,aACtBgB,OAAOJ,mBAAqBA,uBAExBS,KAAOnB,SAASoB,eAAe,cAC/BC,OAASrB,SAASoB,eAAe,6BACjCX,MAAM,uCACVY,OAAOC,iBAAiB,OAAQZ,oBAEU,aAAtCW,OAAOnB,gBAAgBqB,YACvBzB,eAIiB,IAAI0B,eAAe1B,cAC3BiB,QAAQI"}