{"version":3,"file":"resize.min.js","sources":["../src/resize.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript helper function for mod_exeweb module.\n *\n * @module      mod_exeweb/resize\n * @copyright   2023 3&Punt\n * @author      Juan Carrera <juan@treipunt.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable no-console */\n\n/**\n * Resizes iFrame and container height to iframes body size.\n * This function is to be declared on window namespace so iframe onload event can find it.\n * Used as mutation observer callback.\n *\n */\nexport const exewebResize = function() {\n    let iFrame = document.querySelector('#exewebobject');\n    if (iFrame.contentWindow.document.body) {\n        iFrame.style.width = '100%';\n        iFrame.style.height = (iFrame.contentWindow.document.body.scrollHeight + 50) + 'px';\n    }\n};\n\n/**\n * IFrame's onload handler. Used to keep iFrame's height dynamic, varying on iFrame's contents.\n *\n * @param {Element} iFrame\n */\nexport const exewebIframeOnload = function(iFrame) {\n    exewebResize();\n    // Set a mutation observer, so we can adapt to changes from iFrame's javascript (such\n    // as tab clicks o hide/show sections).\n    const config = {attributes: true, childList: true, subtree: true};\n    const observer = new MutationObserver(exewebResize);\n    observer.observe(iFrame.contentWindow.document.body, config);\n};\n\nexport const init = () => {\n    // Declare on window namespace so iframe onload event can find it?\n    // window.exewebResize = exewebResize;\n\n    let page = document.getElementById('exewebpage');\n\n    let iframe = document.getElementById('exewebobject');\n\n    // Watch for changes.\n    const pageObserver = new ResizeObserver(exewebResize);\n    pageObserver.observe(page);\n\n    // Check form changes in iFrame content length.\n    const config = {attributes: true, childList: true, subtree: true};\n    const iframeObserver = new MutationObserver(exewebResize);\n    iframeObserver.observe(iframe.contentWindow.document.body, config);\n\n};\n"],"names":["exewebResize","iFrame","document","querySelector","contentWindow","body","style","width","height","scrollHeight","MutationObserver","observe","attributes","childList","subtree","page","getElementById","iframe","ResizeObserver"],"mappings":";;;;;;;;;MAgCaA,aAAe,eACpBC,OAASC,SAASC,cAAc,iBAChCF,OAAOG,cAAcF,SAASG,OAC9BJ,OAAOK,MAAMC,MAAQ,OACrBN,OAAOK,MAAME,OAAUP,OAAOG,cAAcF,SAASG,KAAKI,aAAe,GAAM,sEASrD,SAASR,QACvCD,eAIiB,IAAIU,iBAAiBV,cAC7BW,QAAQV,OAAOG,cAAcF,SAASG,KAFhC,CAACO,YAAY,EAAMC,WAAW,EAAMC,SAAS,mBAK5C,SAIZC,KAAOb,SAASc,eAAe,cAE/BC,OAASf,SAASc,eAAe,gBAGhB,IAAIE,eAAelB,cAC3BW,QAAQI,MAIE,IAAIL,iBAAiBV,cAC7BW,QAAQM,OAAOb,cAAcF,SAASG,KAFtC,CAACO,YAAY,EAAMC,WAAW,EAAMC,SAAS"}